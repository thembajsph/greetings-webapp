const assert = require("assert");
const greetings = require("../greetings");

describe("The greetings webapp", function () {

	const pg = require("pg");
	const Pool = pg.Pool;
	const connectionString = process.env.DATABASE_URL || 'postgresql://thembajoseph:themba17307@localhost:5432/greetings_tests';
	const pool = new Pool({
		connectionString
	});
	// - DATABASE_URL=postgresql://postgres@localhost:5432/my_products_tests



	// insert query to look into
	const INSERT_QUERY = 'INSERT INTO greetings (name, count) values($1,$2)'
	

	beforeEach(async function () {
		await pool.query("delete from greetings");
	});

	it("should be able to add a greetings", async function () {

		let greets = greetings(pool);

		await greets.enterName("Themba");
		await greets.enterName("Sipho");
		await greets.enterName("Tello");

		assert.deepEqual[{name: "Themba" } , { name: "Sipho" } , {name: "Tello" }], await greets.
		getName();
	
	});


		// await pool.query(INSERT_QUERY, ["Themba", 1]);
		// await pool.query(INSERT_QUERY, ["Sipho", 3, ]);

		//const results = await pool.query("select count(*) from greetings");
		
		// how many bookings should have been added?
	// 	assert.equal(2, results.rows[0].count);

	// });

	it("should be able to find all greetings", async function () {

		await pool.query(INSERT_QUERY, ["Mahlatsi", 4]);
		await pool.query(INSERT_QUERY, ["Thando", 3]);
		await pool.query(INSERT_QUERY, ["Tau", 7]);

		const results = await pool.query("select count(*) from greetings");

		// how many bookings should be found?
		assert.equal(3, results.rows[0].count);
		
	});

	it("should be able to find a greet", async function () {

		await pool.query(INSERT_QUERY, ["Hloni", 7]);

		const results = await pool.query("select * from greetings where name = $1", ["Hloni"]);

		// what fields should have been found in the database?5
		assert.equal("Hloni", results.rows[0].name);
		assert.equal(7, results.rows[0].count);
		//assert.equal("Thursday", results.rows[0].arriving_on);

	});

	it("should be able to update greetings", async function () {

		await pool.query(INSERT_QUERY, ["Pedro", 4]);

		let results = await pool.query("select * from greetings where name = $1", ["Pedro"]);

		assert.equal("Pedro", results.rows[0].name);
		assert.equal(4, results.rows[0].count);


		await pool.query("update greetings set count = $2  where name = $1", ["Pedro", 5]);

		results = await pool.query("select * from greetings where name = $1", ["Pedro"]);

		// what new values should have been found
		assert.equal("Pedro", results.rows[0].name);
		assert.equal(5, results.rows[0].count);
		

	});


	it("should be able to find greetings for 5 counts or longer", async function () {

		await pool.query(INSERT_QUERY, ["Pearl", 5]);
		await pool.query(INSERT_QUERY, ["Quinton", 3]);
		await pool.query(INSERT_QUERY, ["Thabile", 7]);

		const results = await pool.query("select count(*) from greetings where count >= 5");

		// how many bookings should be found?
		assert.equal(2, results.rows[0].count);
		
	});

	after(function() {
		pool.end();
	})

});

// -- sudo -u postgres createdb greetingsWebapp;
// -- Insert into greetings (name, count , time)
// -- values ('Themba', 3, '2020-09-08 14:05:10+02');


// -- Insert into greetings (name, count , time)
// --  values ('Themba', 3, '2020-09-08 14:05:10+02');
// -- id |   name   | number_of_greetings |       time_of_greets       
// -- ----+----------+---------------------+----------------------------
// --   1 | Tau      |                   3 | 2020-09-08 04:10:25+02
// --   2 | Themba   |                   2 | 2020-09-08 00:15:28+02
// --   3 | Sipho    |                   1 | 2020-09-08 01:12:30+02
// --   4 | Mahlatsi |                   4 | 2020-09-08 02:05:10+02
// --  26 |          |                     | 
// --  27 |          |                   1 | 2020-09-09 12:46:17.753+02
// --  28 |          |                   1 | 2020-09-09 12:47:10.171+02
// --  29 |          |                   1 | 2020-09-09 12:47:59.534+02
// -- (29 rows)





  const secondRoute = async function (req, res) {

        try {

            const greets = req.body["language"];
            // // console.log(greets);
            var userName = req.body.userName;
            // console.log(userName);
            var sameCase = userName.charAt(0).toUpperCase() + userName.slice(1).toLowerCase();
            var regex = /\d/g;
            var regex2 = /[!@#$%^&*(),.;-_'"?":{}|<>]-[ A-Za-z]/g;


            // keeping div blank

            if (!userName) {
                req.flash("info", "enter your name")

            }

            if (!sameCase.match(regex) && sameCase.match(regex2)) {

                await greetings.enterName(userName)

                console.log('here');
                

            }
            console.log('here now');

            let greet = {

                names: await greetings.language(greets, sameCase),
                count: await greetings.overallCounter()

            }

            console.log('before rendering');

            console.log(greet)

            // await greetings.getName()

            res.render("index", {
                greet
                // timeOfGreets
                //greet

            });


        } catch (error) {
            console.log(error.name);
            console.log(error.message);
            console.log(error.stack);

        }






    }










	//uchanged
	 const  secondRoute  = async function(req,res) {
        
        try {
            
            const greets = req.body["language"];
            // // console.log(greets);
            var userName = req.body.userName;
            // console.log(userName);
            var sameCase = userName.charAt(0).toUpperCase() + userName.slice(1).toLowerCase();
            var regex = /\d/g;
            var regex2 = /[!@#$%^&*(),.;-_'"?":{}|<>]-[ A-Za-z]/g;
var regex2 = /[!@#$%^&*(),.;-_'"?":{}|<>]-[ A-Za-z]/g;

    // keeping div blank

    if (!userName) {
      req.flash("info", "enter your name")

    }

    if (!sameCase.match(regex) && sameCase.match(regex2)) {

      await greetings.enterName(userName)


      let greet = {

        names: await greetings.language(greets, sameCase),
        count: await greetings.overallCounter()

      }

      await greetings.getName()

      res.render("index", {
        greet
        // timeOfGreets
        //greet

      });

    
    }

  } catch (error) {
    console.log(error.name);
    console.log(error.message);
    console.log(error.stack);

  }






}